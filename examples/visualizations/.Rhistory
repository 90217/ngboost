grads_x = onp.zeros((20, 20))
grads_y = onp.zeros((20, 20))
for (i, j) in itertools.product(np.arange(20), np.arange(20)):
#H = np.linalg.inv(np.array(hessian_fn([loc[i, j], scale[i, j]])))
H = np.linalg.inv(fisher_fn([loc[i, j], scale[i, j]]))
g = np.array(grad_fn([loc[i, j], scale[i, j]]))
gf = H @ g
grads_fisher_x[i, j] = -gf[0]
grads_fisher_y[i, j] = -gf[1]
grads_x[i, j] = -g[0]
grads_y[i, j] = -g[1]
logpdf = -sp.stats.norm.logpdf(rvs, loc = loc, scale = np.exp(scale) ** 0.5).mean(axis=0)
plt.figure(figsize = (10, 8))
plt.subplot(2, 1, 1)
plt.contourf(loc, scale, logpdf, cmap = mpl.cm.viridis, levels = 100)
logpdf_fn(rvs)
logpdfs = -sp.stats.norm.logpdf(rvs, loc = loc, scale = np.exp(scale) ** 0.5).mean(axis=0)
logpdfs
nlls = -sp.stats.norm.logpdf(rvs, loc = loc, scale = np.exp(scale) ** 0.5)
nlls = nlls.mean(axis=0)
nlls = -sp.stats.norm.logpdf(rvs, loc = loc, scale = np.exp(scale) ** 0.5)
nlls = nlls.mean(axis=0)
plt.figure(figsize = (10, 8))
plt.subplot(2, 1, 1)
plt.contourf(loc, scale, nlls, cmap = mpl.cm.viridis, levels = 100)
plt.quiver(loc, scale, 0.02 * grads_x, 0.02 * grads_y, color = "white", angles='xy', scale_units='xy', scale=1)
plt.xlabel("$\mu$")
plt.ylabel("$\log\sigma^2$")
plt.title("Gradient descent")
plt.subplot(2, 1, 2)
plt.contourf(loc, scale, nlls, cmap = mpl.cm.viridis, levels = 100)
plt.quiver(loc, scale, 0.02 * grads_fisher_x, 0.02 * grads_fisher_y, color = "white", angles='xy', scale_units='xy', scale=1)
plt.title("Natural gradient descent")
plt.xlabel("$\mu$")
plt.ylabel("$\log\sigma^2$")
plt.tight_layout()
plt.show()
plt.figure(figsize = (10, 8))
plt.subplot(2, 1, 1)
plt.contourf(loc, scale, nlls, cmap = mpl.cm.viridis, levels = 100)
plt.quiver(loc, scale, 0.02 * grads_x, 0.02 * grads_y, color = "white", angles='xy', scale_units='xy', scale=1)
plt.xlabel("$\mu$")
plt.ylabel("$\log\sigma^2$")
plt.title("Gradient descent")
plt.subplot(2, 1, 2)
plt.contourf(loc, scale, nlls, cmap = mpl.cm.viridis, levels = 100)
plt.quiver(loc, scale, 0.02 * grads_fisher_x, 0.02 * grads_fisher_y, color = "white", angles='xy', scale_units='xy', scale=1)
plt.title("Natural gradient descent")
plt.xlabel("$\mu$")
plt.ylabel("$\log\sigma^2$")
plt.tight_layout()
plt.savefig("./vis_mle.png")
loc = onp.linspace(-3, 3, 30)
scale = onp.linspace(-0.5, 2, 20)
loc, scale = onp.meshgrid(loc, scale)
grads_fisher_x = onp.zeros((30, 20))
grads_fisher_y = onp.zeros((30, 20))
grads_x = onp.zeros((30, 20))
grads_y = onp.zeros((30, 20))
for (i, j) in itertools.product(np.arange(20), np.arange(20)):
#H = np.linalg.inv(np.array(hessian_fn([loc[i, j], scale[i, j]])))
H = np.linalg.inv(fisher_fn([loc[i, j], scale[i, j]]))
g = np.array(grad_fn([loc[i, j], scale[i, j]]))
gf = H @ g
grads_fisher_x[i, j] = -gf[0]
grads_fisher_y[i, j] = -gf[1]
grads_x[i, j] = -g[0]
grads_y[i, j] = -g[1]
nlls = -sp.stats.norm.logpdf(rvs, loc = loc, scale = np.exp(scale) ** 0.5)
nlls = nlls.mean(axis=0)
plt.figure(figsize = (10, 8))
plt.subplot(2, 1, 1)
plt.contourf(loc, scale, nlls, cmap = mpl.cm.viridis, levels = 100)
plt.quiver(loc, scale, 0.02 * grads_x, 0.02 * grads_y, color = "white", angles='xy', scale_units='xy', scale=1)
plt.xlabel("$\mu$")
plt.ylabel("$\log\sigma^2$")
plt.title("Gradient descent")
plt.subplot(2, 1, 2)
plt.contourf(loc, scale, nlls, cmap = mpl.cm.viridis, levels = 100)
plt.quiver(loc, scale, 0.02 * grads_fisher_x, 0.02 * grads_fisher_y, color = "white", angles='xy', scale_units='xy', scale=1)
plt.title("Natural gradient descent")
plt.xlabel("$\mu$")
plt.ylabel("$\log\sigma^2$")
plt.tight_layout()
plt.savefig("./vis_mle.png")
plt.show()
loc = onp.linspace(-3, 3, 30)
scale = onp.linspace(-0.5, 2, 20)
loc, scale = onp.meshgrid(loc, scale)
grads_fisher_x = onp.zeros((30, 20))
grads_fisher_y = onp.zeros((30, 20))
grads_x = onp.zeros((30, 20))
grads_y = onp.zeros((30, 20))
for (i, j) in itertools.product(np.arange(20), np.arange(20)):
#H = np.linalg.inv(np.array(hessian_fn([loc[i, j], scale[i, j]])))
H = np.linalg.inv(fisher_fn([loc[i, j], scale[i, j]]))
g = np.array(grad_fn([loc[i, j], scale[i, j]]))
gf = H @ g
grads_fisher_x[i, j] = -gf[0]
grads_fisher_y[i, j] = -gf[1]
grads_x[i, j] = -g[0]
grads_y[i, j] = -g[1]
nlls = -sp.stats.norm.logpdf(rvs, loc = loc, scale = np.exp(scale) ** 0.5)
nlls = nlls.mean(axis=0)
plt.figure(figsize = (10, 8))
plt.subplot(2, 1, 1)
plt.contourf(loc, scale, nlls, cmap = mpl.cm.viridis, levels = 100)
plt.quiver(loc, scale, 0.02 * grads_x, 0.02 * grads_y, color = "white", angles='xy', scale_units='xy', scale=1)
plt.xlabel("$\mu$")
plt.ylabel("$\log\sigma^2$")
plt.title("Gradient descent")
plt.subplot(2, 1, 2)
plt.contourf(loc, scale, nlls, cmap = mpl.cm.viridis, levels = 100)
plt.quiver(loc, scale, 0.02 * grads_fisher_x, 0.02 * grads_fisher_y, color = "white", angles='xy', scale_units='xy', scale=1)
plt.title("Natural gradient descent")
plt.xlabel("$\mu$")
plt.ylabel("$\log\sigma^2$")
plt.tight_layout()
plt.show()
loc = onp.linspace(-3, 3, 30)
scale = onp.linspace(-0.5, 2, 20)
loc, scale = onp.meshgrid(loc, scale)
grads_fisher_x = onp.zeros((30, 20))
grads_fisher_y = onp.zeros((30, 20))
grads_x = onp.zeros((30, 20))
grads_y = onp.zeros((30, 20))
for (i, j) in itertools.product(np.arange(30), np.arange(20)):
#H = np.linalg.inv(np.array(hessian_fn([loc[i, j], scale[i, j]])))
H = np.linalg.inv(fisher_fn([loc[i, j], scale[i, j]]))
g = np.array(grad_fn([loc[i, j], scale[i, j]]))
gf = H @ g
grads_fisher_x[i, j] = -gf[0]
grads_fisher_y[i, j] = -gf[1]
grads_x[i, j] = -g[0]
grads_y[i, j] = -g[1]
nlls = -sp.stats.norm.logpdf(rvs, loc = loc, scale = np.exp(scale) ** 0.5)
nlls = nlls.mean(axis=0)
plt.figure(figsize = (10, 8))
plt.subplot(2, 1, 1)
plt.contourf(loc, scale, nlls, cmap = mpl.cm.viridis, levels = 100)
plt.quiver(loc, scale, 0.02 * grads_x, 0.02 * grads_y, color = "white", angles='xy', scale_units='xy', scale=1)
plt.xlabel("$\mu$")
plt.ylabel("$\log\sigma^2$")
plt.title("Gradient descent")
plt.subplot(2, 1, 2)
plt.contourf(loc, scale, nlls, cmap = mpl.cm.viridis, levels = 100)
plt.quiver(loc, scale, 0.02 * grads_fisher_x, 0.02 * grads_fisher_y, color = "white", angles='xy', scale_units='xy', scale=1)
plt.title("Natural gradient descent")
plt.xlabel("$\mu$")
plt.ylabel("$\log\sigma^2$")
plt.tight_layout()
plt.savefig("./vis_mle.png")
plt.show()
locloc
loc
loc.shape
scale.shape
scale, loc = onp.meshgrid(loc, scale)
scale
loc
loc = onp.linspace(-3, 3, 30)
scale = onp.linspace(-0.5, 2, 20)
loc, scale = onp.meshgrid(loc, scale)
loc.shape
scale.shaep
scale.shap
scale.shape
loc.shape
import numpy as onp
import jax.numpy as np
import jax.scipy as sp
import jax.scipy.stats
import jax.random as random
import matplotlib as mpl
import itertools
from jax.lax import stop_gradient
from jax import grad, vmap, jacrev, jit
from matplotlib import pyplot as plt
import numpy as onp
import jax.numpy as np
import jax.scipy as sp
import jax.scipy.stats
import jax.random as random
import matplotlib as mpl
import itertools
from jax.lax import stop_gradient
from jax import grad, vmap, jacrev, jit
from matplotlib import pyplot as plt
key = random.PRNGKey(seed=123)
rvs = random.normal(key=key, shape=(500,))[:, np.newaxis, np.newaxis]
from ngboost.distns import Normal
Normal
key = random.PRNGKey(seed=123)
rvs = random.normal(key=key, shape=(500,))[:, np.newaxis, np.newaxis]
logpdf_fn = lambda p: Normal(p).logpdf(rvs)
grad_fn = jit(grad(logpdf_fn))
hessian_fn = jit(jacrev(grad_fn))
loc = onp.linspace(-3, 3, 20)
scale = onp.linspace(-0.5, 2, 20)
loc, scale = onp.meshgrid(loc, scale)
logpdf_fn = lambda p: Normal(p).logpdf(rvs)
fisher_fn = lambda p: Normal(p).fisher_info()
grad_fn = jit(grad(logpdf_fn))
hessian_fn = jit(jacrev(grad_fn))
loc = onp.linspace(-3, 3, 20)
scale = onp.linspace(-0.5, 2, 20)
loc, scale = onp.meshgrid(loc, scale)
grads_fisher_x = onp.zeros((20, 20))
grads_fisher_y = onp.zeros((20, 20))
grads_x = onp.zeros((20, 20))
grads_y = onp.zeros((20, 20))
for (i, j) in itertools.product(np.arange(20), np.arange(20)):
#H = np.linalg.inv(np.array(hessian_fn([loc[i, j], scale[i, j]])))
H = np.linalg.inv(fisher_fn([loc[i, j], scale[i, j]]))
g = np.array(grad_fn([loc[i, j], scale[i, j]]))
gf = H @ g
grads_fisher_x[i, j] = -gf[0]
grads_fisher_y[i, j] = -gf[1]
grads_x[i, j] = -g[0]
grads_y[i, j] = -g[1]
logpdf_fn = lambda p: Normal(p).logpdf(rvs)
logpdf([0,0])
logpdf_fn([0,0])
logpdf_fn([[0,0]])
logpdf_fn(np.array([0,0]))
logpdf_fn = lambda p: Normal(p).logpdf(rvs)
fisher_fn = lambda p: Normal(p).fisher_info()
rvs
key = random.PRNGKey(seed=123)
rvs = random.normal(key=key, shape=(500,)#)[:, np.newaxis, np.newaxis]
logpdf_fn = lambda p: Normal(p).logpdf(rvs)
fisher_fn = lambda p: Normal(p).fisher_info()
nlls = -sp.stats.norm.logpdf(rvs, loc = loc, scale = np.exp(scale) ** 0.5)
nlls = nlls.mean(axis=0)
nlls
nlls.shape
key = random.PRNGKey(seed=123)
rvs = random.normal(key=key, shape=(500,)#)[:, np.newaxis, np.newaxis]
key = random.PRNGKey(seed=123)
rvs = random.normal(key=key, shape=(500,))#)[:, np.newaxis, np.newaxis]
key = random.PRNGKey(seed=123)
rvs = random.normal(key=key, shape=(500,))#)[:, np.newaxis, np.newaxis]
logpdf_fn = lambda p: Normal(p).logpdf(rvs)
fisher_fn = lambda p: Normal(p).fisher_info()
nlls = -sp.stats.norm.logpdf(rvs, loc = loc, scale = np.exp(scale) ** 0.5)
nlls = -sp.stats.norm.logpdf(rvs[: ,np.newaxis, np.newaxis], loc = loc, scale = np.exp(scale) ** 0.5)
nlls
nlls = nlls.mean(axis=0)
nlls
nlls.shape
logpdf_fn = lambda p: Normal(p).logpdf(rvs)
fisher_fn = lambda p: Normal(p).fisher_info()
grad_fn = jit(grad(logpdf_fn))
hessian_fn = jit(jacrev(grad_fn))
loc = onp.linspace(-3, 3, 20)
scale = onp.linspace(-0.5, 2, 20)
loc, scale = onp.meshgrid(loc, scale)
grads_fisher_x = onp.zeros((20, 20))
grads_fisher_y = onp.zeros((20, 20))
grads_x = onp.zeros((20, 20))
grads_y = onp.zeros((20, 20))
for (i, j) in itertools.product(np.arange(20), np.arange(20)):
#H = np.linalg.inv(np.array(hessian_fn([loc[i, j], scale[i, j]])))
H = np.linalg.inv(fisher_fn([loc[i, j], scale[i, j]]))
g = np.array(grad_fn([loc[i, j], scale[i, j]]))
gf = H @ g
grads_fisher_x[i, j] = -gf[0]
grads_fisher_y[i, j] = -gf[1]
grads_x[i, j] = -g[0]
grads_y[i, j] = -g[1]
nlls = -sp.stats.norm.logpdf(rvs[: ,np.newaxis, np.newaxis], loc = loc, scale = np.exp(scale) ** 0.5)
logpdf_fn = lambda p: Normal(p).logpdf(rvs)
logpdf_fn([0,0])
logpdf_fn = lambda p: Normal(p).logpdf(rvs).mean()
fisher_fn = lambda p: Normal(p).fisher_info()
grad_fn = jit(grad(logpdf_fn))
hessian_fn = jit(jacrev(grad_fn))
loc = onp.linspace(-3, 3, 20)
scale = onp.linspace(-0.5, 2, 20)
loc, scale = onp.meshgrid(loc, scale)
grads_fisher_x = onp.zeros((20, 20))
grads_fisher_y = onp.zeros((20, 20))
grads_x = onp.zeros((20, 20))
grads_y = onp.zeros((20, 20))
for (i, j) in itertools.product(np.arange(20), np.arange(20)):
#H = np.linalg.inv(np.array(hessian_fn([loc[i, j], scale[i, j]])))
H = np.linalg.inv(fisher_fn([loc[i, j], scale[i, j]]))
g = np.array(grad_fn([loc[i, j], scale[i, j]]))
gf = H @ g
grads_fisher_x[i, j] = -gf[0]
grads_fisher_y[i, j] = -gf[1]
grads_x[i, j] = -g[0]
grads_y[i, j] = -g[1]
nlls = -sp.stats.norm.logpdf(rvs[: ,np.newaxis, np.newaxis], loc = loc, scale = np.exp(scale) ** 0.5)
nlls = nlls.mean(axis=0)
plt.figure(figsize = (10, 8))
plt.subplot(2, 1, 1)
plt.contourf(loc, scale, nlls, cmap = mpl.cm.viridis, levels = 100)
plt.quiver(loc, scale, 0.02 * grads_x, 0.02 * grads_y, color = "white", angles='xy', scale_units='xy', scale=1)
plt.xlabel("$\mu$")
plt.ylabel("$\log\sigma^2$")
plt.title("Gradient descent")
plt.subplot(2, 1, 2)
plt.contourf(loc, scale, logpdf, cmap = mpl.cm.viridis, levels = 100)
plt.quiver(loc, scale, 0.02 * grads_fisher_x, 0.02 * grads_fisher_y, color = "white", angles='xy', scale_units='xy', scale=1)
plt.title("Natural gradient descent")
plt.xlabel("$\mu$")
plt.ylabel("$\log\sigma^2$")
plt.tight_layout()
plt.savefig("./vis_mle.png")
plt.show()
key = random.PRNGKey(seed=123)
rvs = random.normal(key=key, shape=(500,))
crps_fn = lambda p: Normal(p).crps(rvs).mean()
grad_fn = grad(logpdf_fn)
hessian_fn = jacrev(grad_fn)
key = random.PRNGKey(seed=123)
rvs = random.normal(key=key, shape=(500,))
crps_fn = lambda p: Normal(p).crps(rvs).mean()
grad_fn = grad(logpdf_fn)
hessian_fn = jacrev(grad_fn)
loc = onp.linspace(-3, 3, 20)
scale = onp.linspace(-0.5, 2, 20)
loc, scale = onp.meshgrid(loc, scale)
grads_metric_x = onp.zeros((20, 20))
grads_metric_y = onp.zeros((20, 20))
grads_x = onp.zeros((20, 20))
grads_y = onp.zeros((20, 20))
crps = onp.zeros((20, 20))
for (i, j) in itertools.product(np.arange(20), np.arange(20)):
#H = np.linalg.inv(np.array(hessian_fn([loc[i, j], scale[i, j]])))
#H = np.linalg.inv(fisher_fn([loc[i, j], scale[i, j]]))
g = np.array(grad_fn([loc[i, j], scale[i, j]]))
#gf = H @ g
#grads_metric_x[i, j] = -gf[0]
#grads_metric_y[i, j] = -gf[1]
grads_x[i, j] = -g[0]
grads_y[i, j] = -g[1]
crps[i, j] = crps_fn([loc[i, j], scale[i, j]])
plt.figure(figsize = (10, 8))
plt.contourf(loc, scale, crps, cmap = mpl.cm.viridis, levels = 100)
plt.quiver(loc, scale, 0.02 * grads_x, 0.02 * grads_y, color = "white", angles='xy', scale_units='xy', scale=1)
plt.xlabel("$\mu$")
plt.ylabel("$\log\sigma^2$")
plt.title("Gradient descent")
plt.show()
crps_fn = lambda p: Normal(p).crps(rvs).mean()
grad_fn = grad(crps_fn)
for (i, j) in itertools.product(np.arange(20), np.arange(20)):
#H = np.linalg.inv(np.array(hessian_fn([loc[i, j], scale[i, j]])))
#H = np.linalg.inv(fisher_fn([loc[i, j], scale[i, j]]))
g = np.array(grad_fn([loc[i, j], scale[i, j]]))
#gf = H @ g
#grads_metric_x[i, j] = -gf[0]
#grads_metric_y[i, j] = -gf[1]
grads_x[i, j] = -g[0]
grads_y[i, j] = -g[1]
crps[i, j] = crps_fn([loc[i, j], scale[i, j]])
plt.figure(figsize = (10, 8))
plt.contourf(loc, scale, crps, cmap = mpl.cm.viridis, levels = 100)
plt.quiver(loc, scale, 0.02 * grads_x, 0.02 * grads_y, color = "white", angles='xy', scale_units='xy', scale=1)
plt.xlabel("$\mu$")
plt.ylabel("$\log\sigma^2$")
plt.title("Gradient descent")
plt.show()
plt.figure(figsize = (10, 8))
plt.contourf(loc, scale, crps, cmap = mpl.cm.viridis, levels = 100)
plt.quiver(loc, scale, 0.2 * grads_x, 0.2 * grads_y, color = "white", angles='xy', scale_units='xy', scale=1)
plt.xlabel("$\mu$")
plt.ylabel("$\log\sigma^2$")
plt.title("Gradient descent")
plt.show()
import numpy as onp
import jax.numpy as np
import jax.scipy as sp
import jax.scipy.stats
import jax.random as random
import matplotlib as mpl
import itertools
from ngboost.distns import Normal
from jax.lax import stop_gradient
from jax import grad, vmap, jacrev, jit
from matplotlib import pyplot as plt
key = random.PRNGKey(seed=123)
rvs = random.normal(key=key, shape=(500,))
crps_fn = lambda p: Normal(p).crps(rvs).mean()
grad_fn = grad(crps_fn)
hessian_fn = jacrev(grad_fn)
loc = onp.linspace(-3, 3, 20)
scale = onp.linspace(-0.5, 2, 20)
loc, scale = onp.meshgrid(loc, scale)
grads_metric_x = onp.zeros((20, 20))
grads_metric_y = onp.zeros((20, 20))
grads_x = onp.zeros((20, 20))
grads_y = onp.zeros((20, 20))
crps = onp.zeros((20, 20))
crps_fn = lambda p: Normal(p).crps(rvs).mean()
metric_fn = lambda p: Normal(p).çrps_metric()
metric-fn
metric-fn
metric_fn
metric_fn([0,0])
metric_fn(np.array([0,0]))
import numpy as onp
import jax.numpy as np
import jax.scipy as sp
import jax.scipy.stats
import jax.random as random
import matplotlib as mpl
import itertools
from ngboost.distns import Normal
from jax.lax import stop_gradient
from jax import grad, vmap, jacrev, jit
from matplotlib import pyplot as plt
rvs
crps_fn = lambda p: Normal(p).crps(rvs).mean()
metric_fn = lambda p: Normal(p).çrps_metric()
metric_fn(np.array([0,0]))
Normal
Normal.crps
Normal.crps_metric
import numpy as onp
import jax.numpy as np
import jax.scipy as sp
import jax.scipy.stats
import jax.random as random
import matplotlib as mpl
import itertools
from ngboost.distns import Normal
from jax import grad, vmap, jacrev, jit
from matplotlib import pyplot as plt
key = random.PRNGKey(seed=123)
rvs = random.normal(key=key, shape=(500,))
crps_fn = lambda p: Normal(p).crps(rvs).mean()
metric_fn = lambda p: Normal(p).crps_metric()
scale = onp.linspace(-0.5, 2, 20)
grads_metric_x = onp.zeros((20, 20))
grads_metric_y = onp.zeros((20, 20))
grads_x = onp.zeros((20, 20))
grads_y = onp.zeros((20, 20))
crps = onp.zeros((20, 20))
for (i, j) in itertools.product(np.arange(20), np.arange(20)):
#H = np.linalg.inv(np.array(hessian_fn([loc[i, j], scale[i, j]])))
H = np.linalg.inv(metric_fn([loc[i, j], scale[i, j]]))
g = np.array(grad_fn([loc[i, j], scale[i, j]]))
gf = H @ g
grads_metric_x[i, j] = -gf[0]
grads_metric_y[i, j] = -gf[1]
grads_x[i, j] = -g[0]
grads_y[i, j] = -g[1]
crps[i, j] = crps_fn([loc[i, j], scale[i, j]])
for (i, j) in itertools.product(np.arange(20), np.arange(20)):
#H = np.linalg.inv(np.array(hessian_fn([loc[i, j], scale[i, j]])))
H = np.linalg.inv(metric_fn([loc[i, j], scale[i, j]]))
g = np.array(grad_fn([loc[i, j], scale[i, j]]))
gf = H @ g
grads_metric_x[i, j] = -gf[0]
grads_metric_y[i, j] = -gf[1]
grads_x[i, j] = -g[0]
grads_y[i, j] = -g[1]
crps[i, j] = crps_fn([loc[i, j], scale[i, j]])
loc
scale
len(scale)
len(loc)
loc, scale = onp.meshgrid(loc, scale)
for (i, j) in itertools.product(np.arange(20), np.arange(20)):
#H = np.linalg.inv(np.array(hessian_fn([loc[i, j], scale[i, j]])))
H = np.linalg.inv(metric_fn([loc[i, j], scale[i, j]]))
g = np.array(grad_fn([loc[i, j], scale[i, j]]))
gf = H @ g
grads_metric_x[i, j] = -gf[0]
grads_metric_y[i, j] = -gf[1]
grads_x[i, j] = -g[0]
grads_y[i, j] = -g[1]
crps[i, j] = crps_fn([loc[i, j], scale[i, j]])
import numpy as onp
import jax.numpy as np
import jax.scipy as sp
import jax.scipy.stats
import jax.random as random
import matplotlib as mpl
import itertools
from ngboost.distns import Normal
from jax import grad, vmap, jacrev, jit
from matplotlib import pyplot as plt
key = random.PRNGKey(seed=123)
rvs = random.normal(key=key, shape=(500,))
crps_fn = lambda p: Normal(p).crps(rvs).mean()
metric_fn = lambda p: Normal(p).crps_metric()
grad_fn = grad(crps_fn)
hessian_fn = jacrev(grad_fn)
loc = onp.linspace(-3, 3, 20)
scale = onp.linspace(-0.5, 2, 20)
loc, scale = onp.meshgrid(loc, scale)
grads_metric_x = onp.zeros((20, 20))
grads_metric_y = onp.zeros((20, 20))
grads_x = onp.zeros((20, 20))
grads_y = onp.zeros((20, 20))
crps = onp.zeros((20, 20))
for (i, j) in itertools.product(np.arange(20), np.arange(20)):
#H = np.linalg.inv(np.array(hessian_fn([loc[i, j], scale[i, j]])))
H = np.linalg.inv(metric_fn([loc[i, j], scale[i, j]]))
g = np.array(grad_fn([loc[i, j], scale[i, j]]))
gf = H @ g
grads_metric_x[i, j] = -gf[0]
grads_metric_y[i, j] = -gf[1]
grads_x[i, j] = -g[0]
grads_y[i, j] = -g[1]
crps[i, j] = crps_fn([loc[i, j], scale[i, j]])
loc
scale
